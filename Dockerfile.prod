# Base image with Node.js
FROM node:20.17-alpine AS base

# Dependencies stage
FROM base AS deps
WORKDIR /app
ADD package.json package-lock.json ./
RUN npm ci

# Production dependencies stage
FROM base AS production-deps
WORKDIR /app
ADD package.json package-lock.json ./
RUN npm ci --omit=dev

# Build stage
FROM base AS build
WORKDIR /app
COPY --from=deps /app/node_modules /app/node_modules
ADD . .
RUN node ace build --ignore-ts-errors

# Final production stage
FROM base AS prod
ENV NODE_ENV=production
ENV TZ=UTC
WORKDIR /app

# Install system dependencies
RUN apk update && \
    apk add --no-cache vim git sqlite && \
    npm i -g pm2

# Copy production dependencies and build output
COPY --from=production-deps /app/node_modules /app/build/node_modules
COPY --from=build /app/build /app/build/
COPY --from=build /app/.env /app/
COPY --from=build /app/.env /app/build/
COPY --from=build /app/inertia /app/build/
COPY --from=build /app/tailwind.config.js /app/build/

# Copy the entire app structure (needed for refresh.sh git operations)
COPY --from=build /app /app/

# Copy scripts and make them executable
COPY --from=build /app/start.sh /app/refresh.sh ./
RUN chmod +x start.sh refresh.sh

# Create directory for SQLite database and logs
RUN mkdir -p /app/database /var/log

# Create cron log file
RUN touch /var/log/cron.log

# Expose the port
EXPOSE 3333

# Run the application
CMD ["sh", "./start.sh"]
