# Base image with Node.js
FROM node:20.17-alpine AS base

# Dependencies stage
FROM base AS deps
WORKDIR /app
ADD package.json package-lock.json ./
RUN npm ci

# Production dependencies stage
FROM base AS production-deps
WORKDIR /app
ADD package.json package-lock.json ./
RUN npm ci --omit=dev

# Build stage
FROM base AS build
WORKDIR /app
COPY --from=deps /app/node_modules /app/node_modules
ADD . .
RUN node ace build --ignore-ts-errors

# Final production stage
FROM base AS prod
ENV NODE_ENV=production
ENV TZ=UTC
WORKDIR /app

# Install system dependencies
RUN apk update && \
    apk add --no-cache vim git sqlite && \
    npm i -g pm2

# Copy production dependencies and build output
COPY --from=production-deps /app/node_modules /app/build/node_modules
COPY --from=build /app/build /app/
COPY --from=build /app/.env /app/
COPY --from=build /app/inertia /app/build/
COPY --from=build /app/tailwind.config.js /app/build/

# Create directory for SQLite database
RUN mkdir -p /app/database

# Make scripts executable (if they exist)
RUN if [ -f start.sh ]; then chmod +x start.sh; fi
RUN if [ -f refresh.sh ]; then chmod +x refresh.sh; fi

# Create a simple start script if it doesn't exist
RUN if [ ! -f start.sh ]; then \
    echo '#!/bin/sh' > start.sh && \
    echo 'cd /app' >> start.sh && \
    echo 'pm2-runtime start ecosystem.config.js --env production' >> start.sh && \
    chmod +x start.sh; \
    fi

# Expose the port
EXPOSE 3333

# Run the application
CMD ["./start.sh"]
